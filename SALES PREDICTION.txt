# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Generate some sample data
np.random.seed(0)
num_samples = 1000

# Let's assume our features influencing sales are advertising spend and time of the year
advertising_spend = np.random.normal(100, 20, num_samples)
time_of_year = np.random.normal(0, 1, num_samples)

# Assume some relationship between features and sales
sales = 50 + (advertising_spend * 2) + (time_of_year * 5) + np.random.normal(0, 10, num_samples)

# Create a DataFrame to hold our data
data = pd.DataFrame({'Advertising Spend': advertising_spend, 'Time of Year': time_of_year, 'Sales': sales})

# Split the data into training and testing sets
X = data[['Advertising Spend', 'Time of Year']]
y = data['Sales']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print('Mean Squared Error:', mse)
print('R^2 Score:', r2)

# Plot actual vs. predicted sales
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.title('Actual vs. Predicted Sales')
plt.show()
